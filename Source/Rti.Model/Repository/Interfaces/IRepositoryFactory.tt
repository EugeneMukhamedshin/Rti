<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Rti.Model.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Rti.Model.Domain.Generator" #>
<#@ output extension=".cs" #>

using Rti.Model.Domain;

namespace Rti.Model.Repository.Interfaces
{
    public interface IRepositoryFactory
    {
        ISessionScope CreateSessionScope();
        ITransactionScope CreateTransactionScope();

        IRepository<TEntity> GetRepository<TEntity>() where TEntity : class, IIdentifiedEntity;

<#
            var types = Assembly.GetAssembly(typeof (Entity)).GetTypes()
                .Where(t => t.GetCustomAttributes(typeof (TableAttribute), false).Any());
            foreach (var type in types)
            {
                var tableAttribute =
                    type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
#>
		I<#= type.Name #>Repository Get<#= type.Name #>Repository();
<#
			}
#>
		IReportRepository GetReportRepository();
    }

<#
            foreach (var type in types)
            {
                var tableAttribute =
                    type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
#>
	public partial interface I<#= type.Name #>Repository : IRepository<<#= type.FullName #>> { }
<#
			}
#>
}
