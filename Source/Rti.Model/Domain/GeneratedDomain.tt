<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="$(ProjectDir)bin\Debug\MySql.Data.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Rti.Model.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="MySql.Data" #>
<#@ import namespace="Rti.Model.Domain.Generator" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ output extension=".cs" #>

using System;
using Rti.Model.Domain.Generator;

namespace Rti.Model.Domain
{
<#
	var repository = new EntityRepository
		{
			ConnectionString = "Server=localhost;Database=information_schema;Uid=root;Pwd=root",
			SchemaName = "rti"
		};
	var pluralizationService = PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en")); 
	var entities = repository.GetEntities(this.Host.ResolvePath("domain.xml"));
	foreach(var entity in entities)
	{
		var entityName = pluralizationService.Singularize(entity.Name);
#>
	// The class for <#= entity.TableName #>
	[Table("<#= entity.TableName.ToLower() #>")]
	public partial class <#= entityName #>: IIdentifiedEntity
	{
<#
	foreach(var entityField in entity.Fields)
	{
		var protectedSet = entityField.ColumnName.ToLower() == "id" ? "protected " : "";
		var fieldType = entityField.Type;
		if (fieldType == "Int32" && entityField.ColumnName.ToLower().EndsWith("_enum"))
			fieldType = entityField.Name.Replace("Enum", string.Empty);
		if (fieldType != "String" && entityField.IsNullable && fieldType != "byte[]")
			fieldType =  fieldType + "?";
#>
		[Field("<#= entityField.ColumnName.ToLower() #>")]
		public virtual <#= fieldType #> <#= entityField.Name #> { get; <#= protectedSet #>set; }
<#
	}
	foreach(var reference in entity.References)
	{
		var refType = pluralizationService.Singularize(reference.ReferencedEntityName);
#>
		[Reference("<#= reference.ColumnName.ToLower() #>")]
		public virtual <#= refType #> <#= reference.Name #> { get; set; }
<#
	}
#>
	}

<#
	}
#>
}
