<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)Rti.Model\bin\Debug\Rti.Model.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Rti.Model.Domain.Generator" #>
<#@ output extension=".cs" #>
using System;
using Rti.Model.Domain;
using Rti.Model.Repository.Interfaces;

namespace Rti.ViewModel.Entities
{
<#
            var types = Assembly.GetAssembly(typeof (Entity)).GetTypes()
                .Where(t => t.GetCustomAttributes(typeof (TableAttribute), false).Any());
            foreach (var type in types)
            {
                var tableAttribute =
                    type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
				var viewModelTypeName = type.Name + "ViewModel";
#>
	// The viewmodel for <#= type.Name #>
	public partial class <#= viewModelTypeName #> : EntityViewModel<<#= type.FullName #>, <#= viewModelTypeName #>>
	{
		// Конструктор для маппинга
		public <#= viewModelTypeName #>() { }

        public <#= viewModelTypeName #>(<#= type.FullName #> entity, IRepositoryFactory repositoryFactory) : base(entity, repositoryFactory) { }

<#
                var props =
                    type.GetProperties();
                foreach (var prop in props)
                {
                    var fieldAttribute = prop.GetCustomAttributes(typeof (FieldAttribute), false).FirstOrDefault() as FieldAttribute;
                    if (fieldAttribute != null)
					{
						var propertyTypeName = prop.PropertyType.Name;
						if (propertyTypeName.StartsWith("Nullable"))
							propertyTypeName = prop.PropertyType.GenericTypeArguments[0].Name + "?";
						var fieldName = String.Format("_{0}{1}", prop.Name[0].ToString().ToLower(), prop.Name.Substring(1));
#>
		private <#= propertyTypeName #> <#= fieldName #>;
<#
					}
                    var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
                    if (refAttribute != null)
					{
						var propertyTypeName = prop.PropertyType.Name;
						var fieldName = String.Format("_{0}{1}", prop.Name[0].ToString().ToLower(), prop.Name.Substring(1));
#>
		private <#= propertyTypeName #>ViewModel <#= fieldName #>;
<#
					}
				}
#>

<#
                foreach (var prop in props)
                {
                    var fieldAttribute = prop.GetCustomAttributes(typeof (FieldAttribute), false).FirstOrDefault() as FieldAttribute;
                    if (fieldAttribute != null)
					{
						var propertyTypeName = prop.PropertyType.Name;
						if (propertyTypeName.StartsWith("Nullable"))
							propertyTypeName = prop.PropertyType.GenericTypeArguments[0].Name + "?";
						var fieldName = String.Format("_{0}{1}", prop.Name[0].ToString().ToLower(), prop.Name.Substring(1));
#>
		public <#= propertyTypeName #> <#= prop.Name #> { get { return <#= fieldName #>; } set { if (Equals(<#= fieldName #>, value)) return; <#= fieldName #> = value; OnPropertyChanged(); } }
<#
		            }
                    var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
                    if (refAttribute != null)
					{
						var propertyTypeName = prop.PropertyType.Name;
						var fieldName = String.Format("_{0}{1}", prop.Name[0].ToString().ToLower(), prop.Name.Substring(1));
#>
		public <#= propertyTypeName #>ViewModel <#= prop.Name #> { get { return <#= fieldName #>; } set { <#= fieldName #> = value; OnPropertyChanged(); } }
<#
		            }
				}
#>

		protected override void MapPropertiesToEntity()
		{
<#
                foreach (var prop in props)
                {
					if (prop.Name == "Id")
						continue;
                    var fieldAttribute = prop.GetCustomAttributes(typeof (FieldAttribute), false).FirstOrDefault() as FieldAttribute;
                    if (fieldAttribute != null)
					{
#>
			Entity.<#= prop.Name #> = <#= prop.Name #>; 
<#
		            }
                    var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
                    if (refAttribute != null)
					{
#>
			Entity.<#= prop.Name #> = <#= prop.Name #> == null ? null : <#= prop.Name #>.Entity; 
<#
		            }
				}
#>
		}

		protected override void MapPropertiesFromEntity()
		{
<#
                foreach (var prop in props)
                {
                    var fieldAttribute = prop.GetCustomAttributes(typeof (FieldAttribute), false).FirstOrDefault() as FieldAttribute;
                    if (fieldAttribute != null)
					{
#>
			<#= prop.Name #> = Entity.<#= prop.Name #>; 
<#
		            }
                    var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
                    if (refAttribute != null)
					{
#>
			<#= prop.Name #> = Entity.<#= prop.Name #> == null ? null : new <#= prop.PropertyType.Name #>ViewModel(Entity.<#= prop.Name #>, RepositoryFactory); 
<#
		            }
				}
#>
		}

		public override void CopyTo(<#= viewModelTypeName #> target)
		{
<#
                foreach (var prop in props)
                {
					if (prop.Name == "Id")
						continue;
                    var fieldAttribute = prop.GetCustomAttributes(typeof (FieldAttribute), false).FirstOrDefault() as FieldAttribute;
                    var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
                    if (fieldAttribute != null || refAttribute != null)
					{
#>
			target.<#= prop.Name #> = <#= prop.Name #>; 
<#
		            }
				}
#>
		}

		public override <#= viewModelTypeName #> Clone()
		{
			var copy = new <#= viewModelTypeName #>(null, RepositoryFactory);
			CopyTo(copy);
			return copy;
		}

        public override int GetHashCode() { return _id; }
        protected bool Equals(<#= viewModelTypeName #> other) { return _id == other._id; }
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#= viewModelTypeName #>) obj);
        }
	}

<#
			}
#>
}
