using System; using System.Collections.Generic; using System.Linq; using Rti.Model.Domain; using Rti.Model.Repository.Interfaces; using Rti.ViewModel.EditViewModel; using Rti.ViewModel.Entities; using Rti.ViewModel.Entities.Commands;  namespace Rti.ViewModel.Lists {     public class FlowsheetProcessList: EntityList<FlowsheetProcessViewModel, FlowsheetProcess>     {         private readonly List<FlowsheetProcessViewModel> _deletedItems = new List<FlowsheetProcessViewModel>();          public FlowsheetViewModel Flowsheet { get; set; }          public DelegateCommand AddFlowsheetProcessCommand { get; set; }         public DelegateCommand RemoveFlowsheetProcessCommand { get; set; }          public Lazy<List<MachineViewModel>> MachinesSource { get; private set; }          public FlowsheetProcessList(FlowsheetViewModel flowsheet, bool editMode, IViewService viewService, IRepositoryFactory repositoryFactory) : base(editMode, viewService, repositoryFactory)         {             Flowsheet = flowsheet;             AddFlowsheetProcessCommand = new DelegateCommand(               "Добавить строку",               o => true,               o => AddFlowsheetProcess());             RemoveFlowsheetProcessCommand = new DelegateCommand(                 "Удалить строку",                 o => SelectedItem != null,                 o => RemoveFlowsheetProcess());              TypeMaps.Add(new Tuple<Type, Type>(typeof(FlowsheetProcessViewModel), typeof(FlowsheetProcessEdit)));         }         private void AddFlowsheetProcess()         {             var newItem = DoCreateNewEntity();             Items.Add(newItem);         }          private void RemoveFlowsheetProcess()         {             _deletedItems.Add(SelectedItem);             Items.Remove(SelectedItem);         }          public override void Refresh()         {             base.Refresh();              MachinesSource = new Lazy<List<MachineViewModel>>(() => RepositoryFactory.GetMachineRepository().GetAllActive().OrderBy(o => o.SortOrder).Select(o => new MachineViewModel(o, RepositoryFactory)).ToList());         }          protected override IEnumerable<FlowsheetProcessViewModel> GetItems()         {             return                 RepositoryFactory.GetFlowsheetProcessRepository()                     .GetByFlowsheetId(Flowsheet.Id)                     .OrderBy(o => o.SortOrder)                     .Select(o => new FlowsheetProcessViewModel(o, RepositoryFactory))                     .ToList();         }          protected override FlowsheetProcessViewModel DoCreateNewEntity()         {             var flowsheetProcess = new FlowsheetProcessViewModel(null, RepositoryFactory)             {                 Flowsheet = Flowsheet,                 SortOrder = Items.Any() ? Items.Max(o => o.SortOrder) + 1 : 1             };             var edit = new FlowsheetProcessEdit("Добавление процесса", flowsheetProcess, false, ViewService,                 RepositoryFactory);             if (ViewService.ShowViewDialog(edit) == true)                 return flowsheetProcess;             return null;         }          public void SaveChanges()         {             foreach (var deletedItem in _deletedItems)             {                 deletedItem.DeleteEntity();             }             _deletedItems.Clear();             foreach (var item in Items)             {                 if (item.IsChanged || item.IsNewEntity)                     item.SaveEntity();             }         }          protected override void DoDeleteEntity(FlowsheetProcessViewModel entity)         {             _deletedItems.Add(entity);         }          protected override bool AcceptFind(FlowsheetProcessViewModel entity, string searchText)         {             return searchText.ContainedIn(entity.Name, entity.Operation, entity.Executor, entity.VarName);         }          protected override void RequeryCommandsOnSelectionChanged()         {             base.RequeryCommandsOnSelectionChanged();             AddFlowsheetProcessCommand.RequeryCanExecute();             RemoveFlowsheetProcessCommand.RequeryCanExecute();         }          public void GenerateProcessesForNewFlowsheet()         {             var processTypes = RepositoryFactory.GetProcessRepository().GetAll().ToList();             var processes = new List<FlowsheetProcessViewModel>             {                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 1,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Preparing),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 2,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.FormCleaning),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 3,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.DieSelecting),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 4,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Rolling),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 5,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Extrusion),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 6,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Programming),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 7,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Loading),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 8,                     Process =                         new ProcessViewModel(                             processTypes.Single(p => p.ProcessTypeEnum == ProcessType.CuringOrCutting),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 9,                     Process =                         new ProcessViewModel(processTypes.Single(p => p.ProcessTypeEnum == ProcessType.Unloading),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 10,                     Process =                         new ProcessViewModel(                             processTypes.Single(p => p.ProcessTypeEnum == ProcessType.TechnologyDowntime),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 11,                     Process =                         new ProcessViewModel(                             processTypes.Single(p => p.ProcessTypeEnum == ProcessType.ExecutorDowntime),                             RepositoryFactory)                 },                 new FlowsheetProcessViewModel(null, RepositoryFactory)                 {                     Flowsheet = Flowsheet,                     SortOrder = 12,                     Process =                         new ProcessViewModel(                             processTypes.Single(p => p.ProcessTypeEnum == ProcessType.SummaryCuttingTime),                             RepositoryFactory)                 }             };             Items.ClearAndAddRange(processes);         }     } } 