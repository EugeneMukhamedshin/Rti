<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Rti.Model.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Rti.Model.Domain.Generator" #>
<#@ output extension=".cs" #>

using Rti.Model.Domain;
using Rti.Model.Repository.Interfaces;
using NHibernate;

namespace Rti.Model.Repository.NHibernate
{
    public class NHibernateRepositoryFactory: IRepositoryFactory
    {
        public IRepository<TEntity> GetRepository<TEntity>() where TEntity : class, IIdentifiedEntity
        {
<#
var types = Assembly.GetAssembly(typeof (Entity)).GetTypes()
    .Where(t => t.GetCustomAttributes(typeof (TableAttribute), false).Any());
foreach (var type in types)
{
    var tableAttribute =
        type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
#>
            if (typeof(TEntity) == typeof(<#= type.FullName #>))
                return (IRepository<TEntity>)new <#= type.Name #>Repository();
<#
}
#>
			return new NHibernateRepository<TEntity>();
		}

<#
foreach (var type in types)
{
    var tableAttribute =
        type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
#>
		public I<#= type.Name #>Repository Get<#= type.Name #>Repository() { return (I<#= type.Name #>Repository) GetRepository<<#= type.FullName #>>(); }

<#
}
#>
	}
<#
foreach (var type in types)
{
    var tableAttribute =
        type.GetCustomAttributes(typeof (TableAttribute), false).FirstOrDefault() as TableAttribute;
#>
	public partial class <#= type.Name #>Repository : NHibernateRepository<<#= type.FullName #>>, I<#= type.Name #>Repository
    {

        protected override IQueryOver<<#= type.FullName #>, <#= type.FullName #>> GetDefaultQueryOver(IQueryOver<<#= type.FullName #>, <#= type.FullName #>> queryOver)
        {
			var result = queryOver;
<#
	var props = type.GetProperties();
	foreach (var prop in props)
	{
		var refAttribute = prop.GetCustomAttributes(typeof (ReferenceAttribute), false).FirstOrDefault() as ReferenceAttribute;
		if (refAttribute != null)
		{
#>
			result = result.Fetch(o => o.<#= prop.Name #>).Default;
<#
		}
	}
#>
            return result;
        }
    }

<#
}
#>
}
